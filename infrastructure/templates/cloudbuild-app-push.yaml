logsBucket: "gs://${_ARTIFACT_BUCKET_NAME}/cloudbuild-logs/app-push-trigger"
timeout: 1800s # 30m timeout to allow for pulling latest changes to NVD
steps:
  - id: 'tf init'
    name: 'hashicorp/terraform:1.0.0'
    dir: "${_WORKSTREAM_PATH}"
    entrypoint: 'sh'
    args:
    - '-c'
    - |
      env=${env#*/}
      echo ""
      echo "*************** TERRAFORM INIT ******************"
      echo "******* At environment: ${_WORKSTREAM_PATH} *********"
      echo "*************************************************"
      terraform init || exit 1
  
  - id: 'tf validate'
    name: 'hashicorp/terraform:1.0.0'
    dir: "${_WORKSTREAM_PATH}"
    entrypoint: 'sh'
    args:
    - '-c'
    - |
      env=${env#*/}
      echo ""
      echo "*************** TERRAFORM VALIDATE ******************"
      echo "******* At environment: ${_WORKSTREAM_PATH} *********"
      echo "*************************************************"
      terraform validate || exit 1
  
  - id: 'tf plan'
    name: 'hashicorp/terraform:1.0.0'
    dir: "${_WORKSTREAM_PATH}"
    entrypoint: 'sh'
    args:
    - '-c'
    - |
      env=${env#*/}
      echo ""
      echo "*************** TERRAFORM PLAN ******************"
      echo "******* At environment: ${_WORKSTREAM_PATH} *********"
      echo "*************************************************"
      terraform plan -lock=false -input=false -out=tfplan || exit 1
  
  - id: 'tf apply'
    name: 'hashicorp/terraform:1.0.0'
    dir: "${_WORKSTREAM_PATH}"
    entrypoint: 'sh'
    args:
    - '-c'
    - |
      env=${env#*/}
      echo ""
      echo "*************** TERRAFORM APPLY *********************"
      echo "******* At environment: ${_WORKSTREAM_PATH} *********"
      echo "*************************************************"
      terraform apply -input=false tfplan || exit 1

  - id: get cached build artifacts
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        gsutil -m cp gs://${PROJECT_ID}-cloudbuild-artifacts/gradle-user-home.tar.gz .
        tar -zxf gradle-user-home.tar.gz

  - id: 'build and push image'
    name: 'gradle:7.3.1-jdk11'
    entrypoint: bash
    args:
      - '-c'
      - |
        echo ""
        echo "************** GRADLE BUILD JIB *****************"
        echo "*************************************************"
        ./gradlew clean build dependencyCheckAnalyze \
          jib --image $_GCR_HOSTNAME/$PROJECT_ID/$_REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
    env:
      - 'GRADLE_USER_HOME=/workspace/.build-caches/.gradle'
      - 'GRADLE_OPTS="-Dorg.gradle.daemon=false"'

  - id: update cached build artifacts
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        tar -zcf gradle-user-home.tar.gz .build-caches/.gradle
        gsutil -m cp gradle-user-home.tar.gz gs://${PROJECT_ID}-cloudbuild-artifacts

  - id: 'deploy cloud run service'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args: 
      - '-c'
      - |
        echo ""
        echo "************** GCLOUD RUN DEPLOY ****************"
        echo "*************************************************"
        gcloud run deploy $_SERVICE_NAME \
          --image $_GCR_HOSTNAME/$PROJECT_ID/$_REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA \
          --region $_DEPLOY_REGION \
          --vpc-connector vpcconn \
          --set-env-vars "SPRING_DATASOURCE_URL=jdbc:postgresql://$_DB_ADDRESS:$_DB_PORT/$$DB_NAME" \
          --set-env-vars "SPRING_DATASOURCE_USERNAME=$$DB_USER" \
          --set-env-vars "SPRING_DATASOURCE_PASSWORD=$$DB_PASSWORD"
    secretEnv: 
      - DB_USER
      - DB_PASSWORD
      - DB_NAME

  - id: acceptance tests setup
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        echo ""
        echo "************** ACCEPTANCE TESTS SETUP ****************"
        echo "*************************************************"
        touch acceptance-tests/configuration.properties
        echo "url=$(gcloud run services describe ${_SERVICE_NAME} --format 'value(status.url)' --region ${_DEPLOY_REGION})" > acceptance-tests/configuration.properties
        echo "authorization=$(gcloud auth print-identity-token --impersonate-service-account='${PROJECT_ID}-test-sa@${PROJECT_ID}.iam.gserviceaccount.com')" >> acceptance-tests/configuration.properties

  - id: run acceptance tests
    name: 'gradle:7.3.1-jdk11'
    entrypoint: bash
    args:
      - '-c'
      - |
        echo ""
        echo "************** RUN ACCEPTANCE TESTS *****************"
        echo "*************************************************"
        ./gradlew functionalTest

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/db_pass/versions/latest
      env: 'DB_PASSWORD'
    - versionName: projects/$PROJECT_ID/secrets/db_user/versions/latest
      env: 'DB_USER'
    - versionName: projects/$PROJECT_ID/secrets/db_name/versions/latest
      env: 'DB_NAME'
options:
  substitutionOption: ALLOW_LOOSE
substitutions:
  _DEPLOY_REGION: region-name # udpate region here (us-east4)
  _GCR_HOSTNAME: us.gcr.io # update this if the hostname is different (us -> eu)
  _SERVICE_NAME: gcp-audit-service-name # update this to match your audit service name in GCP
  _REPO_NAME: gcp-audit-service-repo-name # update this to match your audit service repo name in GCP
  _DB_ADDRESS: 172.18.0.2
  _DB_PORT: '5432'
